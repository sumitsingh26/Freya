diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/CalendarDay.tsx b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/CalendarDay.tsx
index a8d8cf6..7967819 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/CalendarDay.tsx
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/CalendarDay.tsx
@@ -1,5 +1,5 @@
 import React, { useCallback, useContext, useMemo } from 'react';
-import { StyleSheet, Text, View } from 'react-native';
+import { Platform, StyleSheet, Text, View } from 'react-native';
 import { theme } from '../utils/theme';
 import Touchable from './Touchable';
 import { OverrideDataContext } from './LocalContext';
@@ -25,67 +25,60 @@ const CalendarDay = ({
 
   const dateObject = useMemo(() => new Date(date), [date]);
   const day = useMemo(() => dateObject.getDate(), [dateObject]);
+  const dayName = useMemo(() => dateObject.toLocaleDateString('en-US', { month: 'short' }), [dateObject]);
   const dayNumberOfWeek = useMemo(() => dateObject.getDay(), [dateObject]);
 
   const getDate = useCallback(() => {
     return dayNamesOverride[dayNumberOfWeek];
   }, [dayNamesOverride, dayNumberOfWeek]);
 
-  const getColorOfDay = useCallback(() => {
-    if (isSelected) return theme.colors.white;
-    if (isToday) return mainColor;
-    return theme.colors.primary900;
-  }, [isSelected, isToday, mainColor]);
+
 
   return (
     <Touchable
       disabled={disabled}
       onPress={onPress}
-      style={styles.dateContainer}
+      style={[styles.dateContainer,
+        Platform.OS === 'ios' ? styles.iosShadow : styles.androidShadow,
+        isSelected ? { backgroundColor: mainColor , borderBottomEndRadius : 0, borderBottomStartRadius : 0 } : {backgroundColor : 'white' , marginVertical : 10}]}
     >
       <Text style={styles.dayTitle}>{getDate()}</Text>
-      <View
-        style={[
-          styles.day,
-          isToday ? styles.todayBackground : styles.defaultBackground,
-          isSelected ? { backgroundColor: mainColor } : styles.day,
-        ]}
-      >
         <Text
           style={[
             styles.dayValue,
-            { opacity: disabled ? 0.5 : 1 },
-            { color: getColorOfDay() },
+            { opacity: disabled ? 0.5 : 1 , color : isSelected ? 'white' : '#AEAEAE'},
           ]}
         >
           {day}
         </Text>
-        {hasAppointments && (
-          <View
-            style={[
-              styles.todayDot,
-              isSelected
-                ? styles.todayBackground
-                : { backgroundColor: mainColor },
-            ]}
-          />
-        )}
-      </View>
+
+         <Text
+          style={[
+            styles.dayValue,
+            { opacity: disabled ? 0.5 : 1 },
+          ]}
+        >
+          {dayName}
+        </Text> 
     </Touchable>
   );
 };
 
 const styles = StyleSheet.create({
   dateContainer: {
+    flex : 1,
     alignItems: 'center',
     justifyContent: 'center',
-    paddingHorizontal: 10,
-    width: 48,
-    paddingVertical: theme.spacing.s,
+    padding: 10,
+    // paddingVertical: theme.spacing.m,
+    backgroundColor: 'white',
+    borderRadius: 10,
+    aspectRatio: 0.75 / 1,
+    marginHorizontal : theme.spacing.s
   },
   dayTitle: {
     color: theme.colors.primary600,
-    fontSize: 14,
+    fontSize: 18,
     lineHeight: 20,
     fontWeight: '600',
   },
@@ -99,9 +92,9 @@ const styles = StyleSheet.create({
   },
   dayValue: {
     color: theme.colors.primary900,
-    fontSize: 17,
+    fontSize: 16,
     lineHeight: 24,
-    fontWeight: '600',
+    fontWeight: '400',
   },
   defaultBackground: {
     backgroundColor: theme.colors.white,
@@ -116,6 +109,15 @@ const styles = StyleSheet.create({
     height: 6,
     borderRadius: theme.borderRadii.l,
   },
+   iosShadow: {
+    shadowOffset: { width: 0, height: 4 },
+    shadowOpacity: 0.2,
+    shadowColor: '#000',
+    shadowRadius: 5,
+  },
+  androidShadow: {
+    elevation: 5,
+  },
 });
 
 export default CalendarDay;
diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/ScheduleDatePicker.tsx b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/ScheduleDatePicker.tsx
index bac891b..c31f53a 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/ScheduleDatePicker.tsx
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/ScheduleDatePicker.tsx
@@ -74,11 +74,6 @@ const ScheduleDatePicker = ({
 
   return (
     <View style={{ backgroundColor }}>
-      <View style={styles.container}>
-        <Text style={styles.title}>
-          {currentMonth} {currentDay}
-        </Text>
-      </View>
       <ScrollView
         ref={scrollRef}
         showsHorizontalScrollIndicator={false}
diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlot.tsx b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlot.tsx
index 816a94e..cfbafd9 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlot.tsx
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlot.tsx
@@ -64,8 +64,7 @@ const TimeSlot = ({ value, onPress, selectedTime }: Props) => {
       <View
         style={[
           styles.container,
-          { width: timeSlotWidth },
-          isSelected ? { backgroundColor: mainColor } : styles.unSelected,
+          { width: timeSlotWidth , backgroundColor : isSelected ? '#F9F9F9' : theme.colors.transparent },
         ]}
       >
         <Text
@@ -90,13 +89,13 @@ const styles = StyleSheet.create({
     backgroundColor: theme.colors.primary200,
   },
   selectedText: {
-    color: theme.colors.white,
     fontSize: 14,
+     color: theme.colors.buttonMain,
     lineHeight: 20,
     fontWeight: '600',
   },
   unSelectedText: {
-    color: theme.colors.primary900,
+    color: theme.colors.buttonMain,
     fontSize: 15,
     lineHeight: 20,
     fontWeight: '400',
diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlots.tsx b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlots.tsx
index eaa2b30..dbc1448 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlots.tsx
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/components/TimeSlots.tsx
@@ -1,6 +1,6 @@
 import React, { useCallback } from 'react';
 import TimeSlot from './TimeSlot';
-import { StyleSheet, Text, View } from 'react-native';
+import { ScrollView, StyleSheet, Text, View } from 'react-native';
 import { theme } from '../utils/theme';
 
 interface Props {
@@ -38,10 +38,13 @@ const TimeSlots = ({
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [slotTimes, selectedTime]);
 
+
   return (
     <View style={[styles.container, { backgroundColor }]}>
-      <Text style={styles.titleContainer}>{title}</Text>
-      <View style={styles.timeSlotsContainer}>{getTimeSlots()}</View>
+      <ScrollView
+        style={styles.timeSlotsContainer}
+        horizontal
+      >{getTimeSlots()}</ScrollView>
     </View>
   );
 };
@@ -62,7 +65,7 @@ const styles = StyleSheet.create({
   },
   timeSlotsContainer: {
     flexDirection: 'row',
-    flexWrap: 'wrap',
+    // flexWrap: 'wrap',
   },
   timeSlotContainer: {
     marginRight: theme.spacing.s,
diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/data.ts b/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/data.ts
index 65ae189..b79c51c 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/data.ts
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/data.ts
@@ -3,7 +3,7 @@ import { theme } from './theme';
 export const defaultActiveColor = theme.colors.primary900;
 export const defaultTimeSlotWidth = 96;
 
-export const defaultDayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
+export const defaultDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
 
 export const defaultMonthNames = [
   'January',
diff --git a/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/dateHelpers.ts b/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/dateHelpers.ts
index 158ce9b..0b599d7 100644
--- a/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/dateHelpers.ts
+++ b/node_modules/@dgreasi/react-native-time-slot-picker/src/utils/dateHelpers.ts
@@ -1,39 +1,52 @@
 import { IAvailableDates } from '../interfaces/app.interface';
 
-const fixedSlotTimes = [
-  '07:00-08:00',
-  '08:00-09:00',
-  '09:00-10:00',
-  '10:00-11:00',
-  '11:00-12:00',
-  '12:00-13:00',
-  '13:00-14:00',
-  '14:00-15:00',
-  '15:00-16:00',
-  '16:00-17:00',
-  '17:00-18:00',
-  '18:00-19:00',
-  '19:00-20:00',
-  '20:00-21:00',
-  '21:00-22:00',
-];
-
-const getNextDays = (daysToAdd: number, currentDate = new Date()) => {
-  const nextDate = new Date(currentDate);
-  nextDate.setDate(currentDate.getDate() + daysToAdd);
-  return nextDate;
-};
+const generateTimeSlots = (selectedDate )=> {
+    const currentTime = new Date();
+  const selectedDateTime = new Date(selectedDate);
+    const currentHour = currentTime.getHours();
+    const currentMinute = currentTime.getMinutes();
+
+    let hour, minute;
+
+    if (selectedDateTime.toDateString() === currentTime.toDateString()) {
+        hour = currentHour;
+        minute = currentMinute < 30 ? 0 : 30;
+    } else {
+        hour = 0;
+        minute = 0;
+    }
+
+    const timeSlots = [];
+
+  while (hour < 24) {
+    const formattedHour = hour < 10 ? `0${hour}` : hour;
+    const formattedMinute = minute === 0 ? '00' : minute;
+
+    timeSlots.push(`${formattedHour}:${formattedMinute}`);
+
+    minute = (minute + 30) % 60;
+    hour += minute === 0 ? 1 : 0;
+  }
 
+    return timeSlots;
+}
 const getFixedAvailableDates = (): IAvailableDates[] => {
   const dates: IAvailableDates[] = [];
 
-  for (let i = 0; i < 20; i++) {
-    const day = {
-      date: getNextDays(i).toISOString(),
-      slotTimes: fixedSlotTimes,
-    };
-    dates.push(day);
-  }
+  // Get current date
+    const currentDate = new Date();
+  const currentDay = currentDate.getDate();
+    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
+
+    // Generate list of dates
+    for (let i = currentDay; i <= lastDayOfMonth; i++) {
+      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
+      const dateData = {
+        date: date.toISOString(),
+        slotTimes: generateTimeSlots(date)
+      }
+      dates.push(dateData);
+    }
 
   return dates;
 };
@@ -42,3 +55,15 @@ const getFixedAvailableDates = (): IAvailableDates[] => {
  * Contains 20 days from today with the `fixedSlotTimes` for every day
  */
 export const fixedAvailableDates: IAvailableDates[] = getFixedAvailableDates();
+
+
+
+
+// Example usage:
+// const todayTimeSlots = generateTimeSlots(new Date());
+// console.log(todayTimeSlots);
+
+// const futureDate = new Date();
+// futureDate.setDate(futureDate.getDate() + 1); // Set the date to tomorrow
+// const futureTimeSlots = generateTimeSlots(futureDate);
+// console.log(futureTimeSlots);
